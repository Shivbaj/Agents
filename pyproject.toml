[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "multi-agent-system"
version = "0.1.0"
description = "A modular multi-agent system with FastAPI, LangChain, LangGraph and LLM integration"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["agents", "llm", "fastapi", "ai", "multimodal"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core FastAPI and server
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP and async utilities
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.2",
    
    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Database and caching
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "redis>=5.0.1",
    
    # Task queue (optional for background tasks)
    "celery>=5.3.4",
    
    # LangChain and LangGraph
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.6",
    "langchain-anthropic>=0.1.0",
    "langgraph>=0.0.30",
    "langsmith>=0.1.0",
    
    # LLM Providers
    "ollama>=0.2.1",
    "openai>=1.6.0",
    "anthropic>=0.7.0",
    
    # Basic image processing (lightweight)
    "pillow>=10.1.0",
    "numpy>=1.24.0",
    
    # Web scraping and HTML parsing
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    
    # Logging and monitoring
    "loguru>=0.7.2",
    "rich>=13.7.0",
    
    # Observability (LangSmith)
    "langsmith>=0.0.87",
    
    # CLI utilities
    "typer>=0.9.0",
    
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    
    # Code formatting and linting
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
]

[project.optional-dependencies]
# Heavy ML dependencies - install separately if needed
ml = [
    "transformers>=4.36.0",
    "torch>=2.1.0", 
    "opencv-python-headless>=4.8.0",
    "sentence-transformers>=2.2.2",
]

# Vector storage - install separately if needed  
vectordb = [
    "chromadb>=0.4.22",
    "faiss-cpu>=1.7.4",
]

# Data processing - install separately if needed
data = [
    "pandas>=2.1.0",
]
dev = [
    "pre-commit>=3.6.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
]

# Optional heavy dependencies for specific use cases
ml-extra = [
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.0",
]

# Production monitoring
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
]

# All optional dependencies
all = [
    "multi-agent-system[dev,ml-extra,monitoring]",
]

[project.urls]
Homepage = "https://github.com/yourusername/multi-agent-system"
Repository = "https://github.com/yourusername/multi-agent-system"
Issues = "https://github.com/yourusername/multi-agent-system/issues"

[project.scripts]
agent-system = "src.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"
asyncio_mode = "auto"